<%
var log = new Log();
var cookie = request.getParameter("cookie");
var user = request.getParameter("user");
var applicationName = request.getParameter("spName");
var action = request.getParameter("clientAction");
handle(action);
function handle(action) {

    session.put('auth-cookie', cookie);
    session.put('user', user);

    try {
        var ssoClient = require('samlSSOConfigServiceClient.jag');
        if (action == 'getServiceProviders') {
            var serviceProviders = ssoClient.getServiceProviders();
            print(serviceProviders);
        } else if (action == 'getClaimURIs') {
            var claimURIs = ssoClient.getClaimURIs();
            print(claimURIs);
        } else if (action == 'removeServiceProvider') {
            var issuer = request.getParameter('issuer');
            removeServiceProvider(issuer, applicationName);
        } else if (action == 'addRPServiceProvider') {
            addServiceProvider();
        } else if(action == 'addIssuerToSP'){
            attachIssuerToSP();

        }
    } catch (e) {
        print(e);
        log.error(e);
    }

}
function removeServiceProvider(issuer, applicationName) {
    var samlClient = require('samlSSOConfigServiceClient.jag');
    var util = require ('util.jag');
    util.preDeleteInboundAuthnConfig('samlsso',applicationName);
    samlClient.removeServiceProvider(issuer);
}


function addServiceProvider() {
    var client = require('samlSSOConfigServiceClient.jag');
    var spName = applicationName;
    var status = false;
    var attributeConsumingServiceIndex = null;
    var serviceProviderDTO = {};

    var isEditingSP = false;
    if (request.getParameter('isEditSP') == 'true') {
        isEditingSP = true;
    }

    if (isEditingSP) {
        serviceProviderDTO["issuer"] = request.getParameter("hiddenIssuer");
    } else {
        serviceProviderDTO["issuer"] = request.getParameter("issuer");
    }
    serviceProviderDTO["assertionConsumerURLs"] = request.getParameter("assertionConsumerURLs").split(",");
    serviceProviderDTO["defaultAssertionConsumerURL"] = request.getParameter("defaultAssertionConsumerURL");
    serviceProviderDTO["signingAlgorithm"] = request.getParameter("signingAlgorithm");
    serviceProviderDTO["digestAlgorithm"] = request.getParameter("digestAlgorithm");
    serviceProviderDTO["enableSingleLogout"] = false;
    serviceProviderDTO["sloResponseURL"] = "";
    serviceProviderDTO["sloRequestURL"] = "";
    serviceProviderDTO["enableResponseSignature"] = false;
    serviceProviderDTO["enableAssertionSignature"] = false;
    serviceProviderDTO["enableAttributeProfile"] = false;
    serviceProviderDTO["enableDefaultAttributeProfileHidden"] = false;
    serviceProviderDTO["nameIdClaim"] = "";
    serviceProviderDTO["loginPageURL"] = "";
    serviceProviderDTO["requestedClaims"] = [];
    serviceProviderDTO["requestedAudiences"] = [];
    serviceProviderDTO["requestedRecipients"] = [];
    serviceProviderDTO["attributeConsumingServiceIndex"] = "";
    serviceProviderDTO["enableIdPInitSSO"] = false;
    serviceProviderDTO["enableIdPInitSLO"] = false;
    serviceProviderDTO["idpInitSLOReturnToURLs"] = [];
    serviceProviderDTO["enableEncAssertion"] = false;
    serviceProviderDTO["enableSigValidation"] = false;
    serviceProviderDTO["alias"] = "";


    if (request.getParameter("enableSingleLogout") == 'true') {
        serviceProviderDTO["enableSingleLogout"] = true;
        if (request.getParameter("sloResponseURL") != null && request.getParameter("sloResponseURL").length > 0) {
            serviceProviderDTO["sloResponseURL"] = request.getParameter("sloResponseURL");
        }
        if (request.getParameter("sloRequestURL") != null && request.getParameter("sloRequestURL").length > 0) {
            serviceProviderDTO["sloRequestURL"] = request.getParameter("sloRequestURL");
        }
    }

    if (request.getParameter("enableResponseSignature") == 'true') {
        serviceProviderDTO["enableResponseSignature"] = true;
    }


    if (request.getParameter("enableAssertionSignature") == 'true') {
        serviceProviderDTO["enableAssertionSignature"] = true;
    }

    serviceProviderDTO["nameIdFormat"] = request.getParameter("nameIdFormat");

    if (serviceProviderDTO["nameIdFormat"] != null && serviceProviderDTO["nameIdFormat"].length > 0) {
        serviceProviderDTO["nameIdFormat"] = serviceProviderDTO["nameIdFormat"].replace(":", "/");
    }

    if (request.getParameter("enableAttributeProfile") != null && request.getParameter("enableAttributeProfile") == 'true') {
        //TODO : Do the following
        //serviceProviderDTO.setRequestedClaims(samlSsoServuceProviderConfigBean.getSelectedClaimsAttay());
        serviceProviderDTO["enableAttributeProfile"] = true;

        if (request.getParameter("enableDefaultAttributeProfileHidden") == 'true') {
            serviceProviderDTO["enableDefaultAttributeProfileHidden"] = true;
        }
    }

    if (request.getParameter("enableNameIdClaimUriHidden") == 'true') {
        serviceProviderDTO["nameIdClaim"] = request.getParameter("nameIdClaim");
    }

    //TODO Check Whether these are needed
    /*
     if (Boolean.parseBoolean(request.getParameter(SAMLSSOUIConstants.ENABLE_AUDIENCE_RESTRICTION))) {
     serviceProviderDTO.setRequestedAudiences(samlSsoServuceProviderConfigBean.getSelectedAudiencesArray());
     }

     if (Boolean.parseBoolean(request.getParameter(SAMLSSOUIConstants.ENABLE_RECIPIENTS))) {
     serviceProviderDTO.setRequestedRecipients(samlSsoServuceProviderConfigBean.getSelectedRecipientsArray());
     }*/

    if (request.getParameter("loginPageURL") != null && "null" != request.getParameter("loginPageURL")) {
        serviceProviderDTO["loginPageURL"] = request.getParameter("loginPageURL");
    }

    if (request.getParameter("enableAudienceRestriction") == 'true') {
        var audiencesCountParameter = request.getParameter("audiencePropertyCounter");
        if (audiencesCountParameter != null && audiencesCountParameter.length > 0) {
            var audiencesCount = audiencesCountParameter;
            var i;
            for (i = 0; i < audiencesCount; i++) {
                var audience = request.getParameter("audiencePropertyName" + i);
                if (audience != null && audience.length > 0) {
                    var currentAudiences = serviceProviderDTO["requestedAudiences"];
                    var isAudienceAlreadyAdded = false;
                    for (var cntr in currentAudiences) {
                        var currentAudience = currentAudiences[cntr];
                        if (audience == currentAudience) {
                            isAudienceAlreadyAdded = true;
                            break;
                        }
                    }
                    if (!isAudienceAlreadyAdded) {
                        serviceProviderDTO["requestedAudiences"].push(audience);
                    }
                }
            }
        }
    }

    if (request.getParameter("enableRecipients") == 'true') {
        var recipientCountParameter = request.getParameter("recipientPropertyCounter");
        if (recipientCountParameter != null && recipientCountParameter.length > 0) {
            var recipientCount = recipientCountParameter;
            var i;
            for (i = 0; i < recipientCount; i++) {
                var recipient = request.getParameter("recipientPropertyName" + i);
                if (recipient != null && recipient.length > 0) {
                    var currentRecipients = serviceProviderDTO["requestedRecipients"];
                    var isRecipientAlreadyAdded = false;
                    for (var cntr in currentRecipients) {
                        var currentRecipient = currentRecipients[cntr];
                        if (recipient == currentRecipient) {
                            isRecipientAlreadyAdded = true;
                            break;
                        }
                    }
                    if (!isRecipientAlreadyAdded) {
                        serviceProviderDTO["requestedRecipients"].push(recipient);
                    }
                }
            }
        }
    }

    if (isEditingSP && request.getParameter("attributeConsumingServiceIndex") != null && request.getParameter("attributeConsumingServiceIndex").length > 0) {
        serviceProviderDTO["attributeConsumingServiceIndex"] = request.getParameter("attributeConsumingServiceIndex");
    }

    //For editing purposes
    if( serviceProviderDTO["enableAttributeProfile"] == false){
        serviceProviderDTO["attributeConsumingServiceIndex"] = "";
    }

    if (request.getParameter("enableIdPInitSSO") == 'true') {
        serviceProviderDTO["enableIdPInitSSO"] = true;
    }

    if (request.getParameter("enableIdPInitSLO") == 'true') {
        serviceProviderDTO["enableIdPInitSLO"] = true;
        var returnToUrls = request.getParameter("idpInitSLOReturnToURLs");
        if (returnToUrls != null && returnToUrls.length > 0) {
            serviceProviderDTO["idpInitSLOReturnToURLs"] = returnToUrls.split(",");
        }
    }

    if (request.getParameter("enableEncAssertion") == 'true') {
        serviceProviderDTO["enableEncAssertion"] = true;
        serviceProviderDTO["alias"] = request.getParameter("alias");
    }

    if (request.getParameter("enableSigValidation") == 'true') {
        serviceProviderDTO["enableSigValidation"] = true;
        serviceProviderDTO["alias"] = request.getParameter("alias");
    }

    if (isEditingSP) {
        removeServiceProvider(serviceProviderDTO["issuer"], spName);
    }

    addRPServiceProvider(serviceProviderDTO,client);
    var serviceProviders = client.getServiceProviders().return.serviceProviders;
    var samlIssuer;
    if (!(serviceProviders instanceof Array)) {
        var tempArr = [];
        tempArr[0] = serviceProviders;
        serviceProviders = tempArr;
    }
    for (var i in serviceProviders) {
        var sp = serviceProviders[i];
        if (sp.issuer == serviceProviderDTO["issuer"]) {
            samlIssuer = sp;
            break;
        }
    }
    postAddSAMLInboundAuthnConfig(samlIssuer, applicationName);

    /*
     if (status) {
     attributeConsumingServiceIndex = client.getServiceProvider(serviceProviderDTO.getIssuer()).getAttributeConsumingServiceIndex();
     }
     samlSsoServuceProviderConfigBean.clearBean();

     String message;
     if (status) {
     if (isEditingSP) {
     message = resourceBundle.getString("sp.updated.successfully");
     } else {
     message = resourceBundle.getString("sp.added.successfully");
     }
     } else {
     message = resourceBundle.getString("error.adding.sp");
     }

     if (status) {
     CarbonUIMessage.sendCarbonUIMessage(message, CarbonUIMessage.INFO, request);
     } else {
     CarbonUIMessage.sendCarbonUIMessage(message, CarbonUIMessage.ERROR, request);
     }
     */

}
function addRPServiceProvider(serviceProviderDTO,client){
    var payload = '<xsd:addRPServiceProvider xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:xsd="http://org.apache.axis2/xsd" xmlns:xsd1="http://dto.saml.sso.identity.carbon.wso2.org/xsd">' +
            '<xsd:spDto>' +
            '<xsd1:assertionConsumerUrl></xsd1:assertionConsumerUrl>';
    if (serviceProviderDTO["assertionConsumerURLs"].length > 0) {
        for (var cntr in serviceProviderDTO["assertionConsumerURLs"]) {
            payload = payload + '<xsd1:assertionConsumerUrls>' + serviceProviderDTO["assertionConsumerURLs"][cntr] + '</xsd1:assertionConsumerUrls>';
        }
    }
    payload = payload + '<xsd1:attributeConsumingServiceIndex>' + serviceProviderDTO["attributeConsumingServiceIndex"] + '</xsd1:attributeConsumingServiceIndex>' +
            '<xsd1:certAlias>' + serviceProviderDTO["alias"] + '</xsd1:certAlias>' +
            '<xsd1:defaultAssertionConsumerUrl>' + serviceProviderDTO["defaultAssertionConsumerURL"] + '</xsd1:defaultAssertionConsumerUrl>' +
            '<xsd1:digestAlgorithmURI>' + serviceProviderDTO["digestAlgorithm"] + '</xsd1:digestAlgorithmURI>' +
            '<xsd1:doEnableEncryptedAssertion>' + serviceProviderDTO["enableEncAssertion"] + '</xsd1:doEnableEncryptedAssertion>' +
            '<xsd1:doSignAssertions>' + serviceProviderDTO["enableAssertionSignature"] + '</xsd1:doSignAssertions>' +
            '<xsd1:doSignResponse>' + serviceProviderDTO["enableResponseSignature"] + '</xsd1:doSignResponse>' +
            '<xsd1:doSingleLogout>' + serviceProviderDTO["enableSingleLogout"] + '</xsd1:doSingleLogout>' +
            '<xsd1:doValidateSignatureInRequests>' + serviceProviderDTO["enableSigValidation"] + '</xsd1:doValidateSignatureInRequests>' +
            '<xsd1:enableAttributeProfile>' + serviceProviderDTO["enableAttributeProfile"] + '</xsd1:enableAttributeProfile>' +
            '<xsd1:enableAttributesByDefault>' + serviceProviderDTO["enableDefaultAttributeProfileHidden"] + '</xsd1:enableAttributesByDefault>' +
            '<xsd1:idPInitSLOEnabled>' + serviceProviderDTO["enableIdPInitSLO"] + '</xsd1:idPInitSLOEnabled>' +
            '<xsd1:idPInitSSOEnabled>' + serviceProviderDTO["enableIdPInitSSO"] + '</xsd1:idPInitSSOEnabled>';

    if (serviceProviderDTO["idpInitSLOReturnToURLs"].length > 0) {
        for (var cntr in serviceProviderDTO["idpInitSLOReturnToURLs"]) {
            payload = payload + '<xsd1:idpInitSLOReturnToURLs>' + serviceProviderDTO["idpInitSLOReturnToURLs"][cntr] + '</xsd1:idpInitSLOReturnToURLs>';
        }
    }

    payload = payload + '<xsd1:issuer>' + serviceProviderDTO["issuer"] + '</xsd1:issuer>' +
            '<xsd1:loginPageURL>' + serviceProviderDTO["loginPageURL"] + '</xsd1:loginPageURL>' +
            '<xsd1:nameIDFormat>' + serviceProviderDTO["nameIdFormat"] + '</xsd1:nameIDFormat>' +
            '<xsd1:nameIdClaimUri>' + serviceProviderDTO["nameIdClaim"] + '</xsd1:nameIdClaimUri>';

    if (serviceProviderDTO["requestedAudiences"].length > 0) {
        for (var cntr in serviceProviderDTO["requestedAudiences"]) {
            payload = payload + '<xsd1:requestedAudiences>' + serviceProviderDTO["requestedAudiences"] + '</xsd1:requestedAudiences>';
        }
    }

    if (serviceProviderDTO["requestedClaims"].length > 0) {
        for (var cntr in serviceProviderDTO["requestedClaims"]) {
            payload = payload + '<xsd1:requestedClaims>' + serviceProviderDTO["requestedClaims"][cntr] + '</xsd1:requestedClaims>';
        }
    }

    if (serviceProviderDTO["requestedRecipients"].length > 0) {
        for (var cntr in serviceProviderDTO["requestedRecipients"]) {
            payload = payload + '<xsd1:requestedRecipients>' + serviceProviderDTO["requestedRecipients"][cntr] + '</xsd1:requestedRecipients>'
        }

    }

    payload = payload + '<xsd1:signingAlgorithmURI>' + serviceProviderDTO["signingAlgorithm"] + '</xsd1:signingAlgorithmURI>' +
            '<xsd1:sloRequestURL>' + serviceProviderDTO["sloRequestURL"] + '</xsd1:sloRequestURL>' +
            '<xsd1:sloResponseURL>' + serviceProviderDTO["sloResponseURL"] + '</xsd1:sloResponseURL>' +
            '</xsd:spDto>' +
            '</xsd:addRPServiceProvider>';

    client.addRPServiceProvider(payload);

}
function postAddSAMLInboundAuthnConfig(samlIssuer,applicationName){

    var spAdminClient = require('spAdminClient.jag');
    var serviceProvider = spAdminClient.getApplication(applicationName).return;

    var updateApp = '<xsd:updateApplication xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://org.apache.axis2/xsd" xmlns:xsd1="http://model.common.application.identity.carbon.wso2.org/xsd">' +
            '<xsd:serviceProvider>' +
            '<xsd1:applicationID>' + serviceProvider.applicationID + '</xsd1:applicationID>' +
            '<xsd1:applicationName>' + serviceProvider.applicationName + '</xsd1:applicationName>';

    //claimConfig
    if (serviceProvider.claimConfig != null) {
        updateApp = updateApp + '<xsd1:claimConfig>' +
                '<xsd1:alwaysSendMappedLocalSubjectId>' + serviceProvider.claimConfig.alwaysSendMappedLocalSubjectId + '</xsd1:alwaysSendMappedLocalSubjectId>';
        var claimMappings = serviceProvider.claimConfig.claimMappings;
        if (claimMappings != null && claimMappings.length > 0) {
            if (!(claimMappings instanceof Array)) {
                var tempArr = [];
                tempArr[0] = claimMappings;
                claimMappings = tempArr;
            }
            for (var i in claimMappings) {
                var claimMapping = claimMappings[i];
                updateApp = updateApp + '<xsd1:claimMappings>' +
                        '<xsd1:defaultValue>' + claimMapping.defaultValue + '</xsd1:defaultValue>' +
                        '<xsd1:localClaim>' +
                        '<xsd1:claimId>' + claimMapping.localClaim.claimId + '</xsd1:claimId>' +
                        '<xsd1:claimUri>' + claimMapping.localClaim.claimUri + '</xsd1:claimUri>' +
                        '</xsd1:localClaim>' +
                        '<xsd1:remoteClaim>' +
                        '<xsd1:claimId>' + claimMapping.remoteClaim.claimId + '</xsd1:claimId>' +
                        '<xsd1:claimUri>' + claimMapping.remoteClaim.claimUri + '</xsd1:claimUri>' +
                        '</xsd1:remoteClaim>' +
                        '<xsd1:requested>' + claimMapping.requested + '</xsd1:requested>' +
                        '</xsd1:claimMappings>';
            }
        }
        updateApp = updateApp + '<xsd1:localClaimDialect>' + serviceProvider.claimConfig.localClaimDialect + '</xsd1:localClaimDialect>' +
                '<xsd1:roleClaimURI>' + serviceProvider.claimConfig.roleClaimURI + '</xsd1:roleClaimURI>' +
                '<xsd1:userClaimURI>' + serviceProvider.claimConfig.userClaimURI + '</xsd1:userClaimURI>' +
                '</xsd1:claimConfig>';
    }
    updateApp = updateApp + '<xsd1:description>' + serviceProvider.description + '</xsd1:description>';

    //inboundAuthenticationConfig
    if (serviceProvider.inboundAuthenticationConfig != null) {
        updateApp = updateApp + '<xsd1:inboundAuthenticationConfig>';
        var authConfigs = serviceProvider.inboundAuthenticationConfig.inboundAuthenticationRequestConfigs;
        if (authConfigs != null) {
            if (!(authConfigs instanceof Array)) {
                var tempArr = [];
                tempArr[0] = authConfigs;
                authConfigs = tempArr;
            }
            for (var i in authConfigs) {
                var config = authConfigs[i];

                if(config.inboundAuthType!="samlsso") {
                    updateApp = updateApp + '<xsd1:inboundAuthenticationRequestConfigs>' +
                            '<xsd1:friendlyName>' + config.friendlyName + '</xsd1:friendlyName>' +
                            '<xsd1:inboundAuthKey>' + config.inboundAuthKey + '</xsd1:inboundAuthKey>' +
                            '<xsd1:inboundAuthType>' + config.inboundAuthType + '</xsd1:inboundAuthType>' +
                            '</xsd1:inboundAuthenticationRequestConfigs>';
                    if (config.properties != null) {
                        if (!(config.properties instanceof Array)) {
                            var tempArr = [config.properties];
                            config.properties = tempArr;
                        }
                        for (var i in config.properties) {
                            var property = config.properties[i];
                            updateApp = updateApp + '<xsd1:properties>' +
                                    '<xsd1:confidential>' + property.confidential + '</xsd1:confidential>' +
                                    '<xsd1:defaultValue>' + property.defaultValue + '</xsd1:defaultValue>' +
                                    '<xsd1:description>' + property.description + '</xsd1:description>' +
                                    '<xsd1:displayName>' + property.displayName + '</xsd1:displayName>' +
                                    '<xsd1:displayOrder>' + property.displayOrder + '</xsd1:displayOrder>' +
                                    '<xsd1:name>' + property.name + '</xsd1:name>' +
                                    '<xsd1:required>' + property.required + '</xsd1:required>' +
                                    '<xsd1:type>' + property.type + '</xsd1:type>' +
                                    '<xsd1:value>' + property.value + '</xsd1:value>' +
                                    '</xsd1:properties>';
                        }
                    }
                }
            }

        }
        updateApp = updateApp + '<xsd1:inboundAuthenticationRequestConfigs>' +
                '<xsd1:friendlyName></xsd1:friendlyName>' +
                '<xsd1:inboundAuthKey>' + samlIssuer.issuer + '</xsd1:inboundAuthKey>' +
                '<xsd1:inboundAuthType>' + "samlsso" + '</xsd1:inboundAuthType>';

        if(samlIssuer.attributeConsumingServiceIndex!=null && samlIssuer.attributeConsumingServiceIndex.length>0) {
            updateApp = updateApp + '<xsd1:properties>' +
                    '<xsd1:confidential>false</xsd1:confidential>' +
                    '<xsd1:defaultValue></xsd1:defaultValue>' +
                    '<xsd1:description></xsd1:description>' +
                    '<xsd1:displayName></xsd1:displayName>' +
                    '<xsd1:displayOrder>0</xsd1:displayOrder>' +
                    '<xsd1:name>attrConsumServiceIndex</xsd1:name>' +
                    '<xsd1:required>false</xsd1:required>' +
                    '<xsd1:type></xsd1:type>' +
                    '<xsd1:value>' + samlIssuer.attributeConsumingServiceIndex +'</xsd1:value>' +
                    '</xsd1:properties>';
        }

        updateApp = updateApp + '</xsd1:inboundAuthenticationRequestConfigs>';
        updateApp = updateApp + '</xsd1:inboundAuthenticationConfig>';
    }
    //inboundProvisioningConfig
    if (serviceProvider.inboundProvisioningConfig != null) {
        updateApp = updateApp + '<xsd1:inboundProvisioningConfig>' +
                '<xsd1:dumbMode>' + serviceProvider.inboundProvisioningConfig.dumbMode + '</xsd1:dumbMode>' +
                '<xsd1:provisioningEnabled>' + serviceProvider.inboundProvisioningConfig.provisioningEnabled + '</xsd1:provisioningEnabled>' +
                '<xsd1:provisioningUserStore>' + serviceProvider.inboundProvisioningConfig.provisioningUserStore + '</xsd1:provisioningUserStore>' +
                '</xsd1:inboundProvisioningConfig>';
    }

    if (serviceProvider.outboundProvisioningConfig != null) {
        updateApp = updateApp + '<xsd1:outboundProvisioningConfig>' +
                '<xsd1:provisionByRoleList>' + serviceProvider.outboundProvisioningConfig.provisionByRoleList + '</xsd1:provisionByRoleList>' +
                '</xsd1:outboundProvisioningConfig>';
    }
    updateApp = updateApp + '<xsd1:permissionAndRoleConfig>' + serviceProvider.permissionAndRoleConfig + '</xsd1:permissionAndRoleConfig>' +
            '</xsd:serviceProvider>' +
            '</xsd:updateApplication>';

    spAdminClient.updateApplicationData(updateApp);
}

%>

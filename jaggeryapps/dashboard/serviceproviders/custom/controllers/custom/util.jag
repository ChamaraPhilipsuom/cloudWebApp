<%
function preDeleteInboundAuthnConfig(configTypeStr,applicationName) {
    var spAdminClient = require('spAdminClient.jag');
    var serviceProvider = spAdminClient.getApplication(applicationName).return;
    var updateApp = '<xsd:updateApplication xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://org.apache.axis2/xsd" xmlns:xsd1="http://model.common.application.identity.carbon.wso2.org/xsd">' +
            '<xsd:serviceProvider>' +
            '<xsd1:applicationID>' + serviceProvider.applicationID + '</xsd1:applicationID>' +
            '<xsd1:applicationName>' + serviceProvider.applicationName + '</xsd1:applicationName>';

    //claimConfig
    if (serviceProvider.claimConfig != null) {
        updateApp = updateApp + '<xsd1:claimConfig>' +
                '<xsd1:alwaysSendMappedLocalSubjectId>' + serviceProvider.claimConfig.alwaysSendMappedLocalSubjectId + '</xsd1:alwaysSendMappedLocalSubjectId>';
        var claimMappings = serviceProvider.claimConfig.claimMappings;
        if (claimMappings != null && claimMappings.length > 0) {
            if (!(claimMappings instanceof Array)) {
                var tempArr = [];
                tempArr[0] = claimMappings;
                claimMappings = tempArr;
            }
            for (var i in claimMappings) {
                var claimMapping = claimMappings[i];
                updateApp = updateApp + '<xsd1:claimMappings>' +
                        '<xsd1:defaultValue>' + claimMapping.defaultValue + '</xsd1:defaultValue>' +
                        '<xsd1:localClaim>' +
                        '<xsd1:claimId>' + claimMapping.localClaim.claimId + '</xsd1:claimId>' +
                        '<xsd1:claimUri>' + claimMapping.localClaim.claimUri + '</xsd1:claimUri>' +
                        '</xsd1:localClaim>' +
                        '<xsd1:remoteClaim>' +
                        '<xsd1:claimId>' + claimMapping.remoteClaim.claimId + '</xsd1:claimId>' +
                        '<xsd1:claimUri>' + claimMapping.remoteClaim.claimUri + '</xsd1:claimUri>' +
                        '</xsd1:remoteClaim>' +
                        '<xsd1:requested>' + claimMapping.requested + '</xsd1:requested>' +
                        '</xsd1:claimMappings>';
            }
        }
        updateApp = updateApp + '<xsd1:localClaimDialect>' + serviceProvider.claimConfig.localClaimDialect + '</xsd1:localClaimDialect>' +
                '<xsd1:roleClaimURI>' + serviceProvider.claimConfig.roleClaimURI + '</xsd1:roleClaimURI>' +
                '<xsd1:userClaimURI>' + serviceProvider.claimConfig.userClaimURI + '</xsd1:userClaimURI>' +
                '</xsd1:claimConfig>';
    }
    updateApp = updateApp + '<xsd1:description>' + serviceProvider.description + '</xsd1:description>';

    //inboundAuthenticationConfig
    if (serviceProvider.inboundAuthenticationConfig != null) {
        updateApp = updateApp + '<xsd1:inboundAuthenticationConfig>';
        var authConfigs = serviceProvider.inboundAuthenticationConfig.inboundAuthenticationRequestConfigs;
        if (authConfigs != null && authConfigs.length > 0) {
            if (!(authConfigs instanceof Array)) {
                var tempArr = [];
                tempArr[0] = authConfigs;
                authConfigs = tempArr;
            }
            for (var i in authConfigs) {
                var config = authConfigs[i];
                if (configTypeStr != config.inboundAuthType) {
                    updateApp = updateApp + '<xsd1:inboundAuthenticationRequestConfigs>' +
                            '<xsd1:friendlyName>' + config.friendlyName + '</xsd1:friendlyName>' +
                            '<xsd1:inboundAuthKey>' + config.inboundAuthKey + '</xsd1:inboundAuthKey>' +
                            '<xsd1:inboundAuthType>' + config.inboundAuthType + '</xsd1:inboundAuthType>' +
                            '</xsd1:inboundAuthenticationRequestConfigs>';
                }
            }
        }
        updateApp = updateApp + '</xsd1:inboundAuthenticationConfig>';
    }
    //inboundProvisioningConfig
    if (serviceProvider.inboundProvisioningConfig != null) {
        updateApp = updateApp + '<xsd1:inboundProvisioningConfig>' +
                '<xsd1:dumbMode>' + serviceProvider.inboundProvisioningConfig.dumbMode + '</xsd1:dumbMode>' +
                '<xsd1:provisioningEnabled>' + serviceProvider.inboundProvisioningConfig.provisioningEnabled + '</xsd1:provisioningEnabled>' +
                '<xsd1:provisioningUserStore>' + serviceProvider.inboundProvisioningConfig.provisioningUserStore + '</xsd1:provisioningUserStore>' +
                '</xsd1:inboundProvisioningConfig>';
    }

    if (serviceProvider.outboundProvisioningConfig != null) {
        updateApp = updateApp + '<xsd1:outboundProvisioningConfig>' +
                '<xsd1:provisionByRoleList>' + serviceProvider.outboundProvisioningConfig.provisionByRoleList + '</xsd1:provisionByRoleList>' +
                '</xsd1:outboundProvisioningConfig>';
    }
    updateApp = updateApp + '<xsd1:permissionAndRoleConfig>' + serviceProvider.permissionAndRoleConfig + '</xsd1:permissionAndRoleConfig>' +
            '</xsd:serviceProvider>' +
            '</xsd:updateApplication>';

    spAdminClient.updateApplicationData(updateApp);
}

%>